#!/usr/bin/env python
""" Provide functionality for a C extension model

	WARNING: THIS FILE WAS GENERATED BY WRAPPERGENERATOR.PY
 	         DO NOT MODIFY THIS FILE, MODIFY core_shell_cylinder.h
 	         AND RE-RUN THE GENERATOR SCRIPT

    @author: Mathieu Doucet / UTK
    @contact: mathieu.doucet@nist.gov
"""

from sans.models.BaseComponent import BaseComponent
from sans_extension.c_models import CCoreShellCylinderModel
import copy    
    
class CoreShellCylinderModel(CCoreShellCylinderModel, BaseComponent):
    """ Class that evaluates a CoreShellCylinderModel model. 
    	This file was auto-generated from core_shell_cylinder.h.
    	Refer to that file and the structure it contains
    	for details of the model.
    	List of default parameters:
         scale           = 1.0 
         radius          = 20.0 A
         thickness       = 10.0 A
         length          = 400.0 A
         core_sld        = 1e-006 A-2
         shell_sld       = 4e-006 A-2
         solvent_sld     = 1e-006 A-2
         background      = 0.0 cm-1
         axis_theta      = 1.57 rad
         axis_phi        = 0.0 rad

    """
        
    def __init__(self):
        """ Initialization """
        
        # Initialize BaseComponent first, then sphere
        BaseComponent.__init__(self)
        CCoreShellCylinderModel.__init__(self)
        
        ## Name of the model
        self.name = "CoreShellCylinderModel"
        self.description= """P(q,alpha)= scale/Vs*f(q)^(2) + bkg  Where:\n\
		f(q)= 2(core_sld- solvant_sld)* Vc*sin[qLcos(alpha/2)]/\n\
		[qLcos(alpha/2)]*J1(qRsin(alpha))/[qRsin(alpha)] +\n 2(shell_sld-solvent_sld)*Vs
		*sin[q(L+T)cos(alpha/2)]/[[q(L+T)cos(alpha/2)]
		*J1(q(R+T)sin(alpha))/q(R+T)sin(alpha)]
		alpha:is the angle between the axis of the cylinder and the q-vector
		Vs: the volume of the outer shell
		Vc: the volume of the core
		L: the length of the core
		shell_sld: the scattering length density of the shell
		solvent_sld: the scattering length density of the solvent
		bkg: the background
		T: the thickness
		R+T: is the outer radius
		L+2T: The total length of the outershell
		J1: the first order Bessel function
		theta: axis_theta of the cylinder
		phi: the axis_phi of the cylinder"""
		## Parameter details [units, min, max]
        self.details = {}
        self.details['scale'] = ['', None, None]
        self.details['radius'] = ['A', None, None]
        self.details['thickness'] = ['A', None, None]
        self.details['length'] = ['A', None, None]
        self.details['core_sld'] = ['A-2', None, None]
        self.details['shell_sld'] = ['A-2', None, None]
        self.details['solvent_sld'] = ['A-2', None, None]
        self.details['background'] = ['cm-1', None, None]
        self.details['axis_theta'] = ['rad', None, None]
        self.details['axis_phi'] = ['rad', None, None]

   
    def clone(self):
        """ Return a identical copy of self """
        obj = CoreShellCylinderModel()
        obj.params = copy.deepcopy(self.params)
        return obj   
   
    def run(self, x = 0.0):
        """ Evaluate the model
            @param x: input q, or [q,phi]
            @return: scattering function P(q)
        """
        
        return CCoreShellCylinderModel.run(self, x)
   
    def runXY(self, x = 0.0):
        """ Evaluate the model in cartesian coordinates
            @param x: input q, or [qx, qy]
            @return: scattering function P(q)
        """
        
        return CCoreShellCylinderModel.runXY(self, x)
   
# End of file
