#!/usr/bin/env python
""" Provide functionality for a C extension model

	WARNING: THIS FILE WAS GENERATED BY WRAPPERGENERATOR.PY
 	         DO NOT MODIFY THIS FILE, MODIFY [INCLUDE_FILE]
 	         AND RE-RUN THE GENERATOR SCRIPT

    @author: Mathieu Doucet / UTK
    @contact: mathieu.doucet@nist.gov
"""

from sans.models.BaseComponent import BaseComponent
from sans_extension.c_models import [CPYTHONCLASS]
import copy    
    
class [PYTHONCLASS]([CPYTHONCLASS], BaseComponent):
    """ Class that evaluates a [PYTHONCLASS] model. 
    	This file was auto-generated from [INCLUDE_FILE].
    	Refer to that file and the structure it contains
    	for details of the model.
    	[DEFAULT_LIST]
    """
        
    def __init__(self):
        """ Initialization """
        
        # Initialize BaseComponent first, then sphere
        BaseComponent.__init__(self)
        [CPYTHONCLASS].__init__(self)
        
        ## Name of the model
        self.name = "[PYTHONCLASS]"
        self.description= """[DESCRIPTION]"""
		[PAR_DETAILS]
   
    def clone(self):
        """ Return a identical copy of self """
        obj = [PYTHONCLASS]()
        obj.params = copy.deepcopy(self.params)
        return obj   
   
    def run(self, x = 0.0):
        """ Evaluate the model
            @param x: input q, or [q,phi]
            @return: scattering function P(q)
        """
        
        return [CPYTHONCLASS].run(self, x)
   
    def runXY(self, x = 0.0):
        """ Evaluate the model in cartesian coordinates
            @param x: input q, or [qx, qy]
            @return: scattering function P(q)
        """
        
        return [CPYTHONCLASS].runXY(self, x)
   
# End of file