#!/usr/bin/env python
""" Provide functionality for a C extension model

	WARNING: THIS FILE WAS GENERATED BY WRAPPERGENERATOR.PY
 	         DO NOT MODIFY THIS FILE, MODIFY disperse_cylinder.h
 	         AND RE-RUN THE GENERATOR SCRIPT

    @author: Mathieu Doucet / UTK
    @contact: mathieu.doucet@nist.gov
"""

from sans.models.BaseComponent import BaseComponent
from sans_extension.prototypes.c_models import CDispCylinderModel
import copy    
    
class DispCylinderModel(CDispCylinderModel, BaseComponent):
    """ Class that evaluates a DispCylinderModel model. 
    	This file was auto-generated from disperse_cylinder.h.
    	Refer to that file and the structure it contains
    	for details of the model.
    	List of default parameters:
         scale           = 1.0 
         radius          = 20.0 A
         length          = 400.0 A
         contrast        = 3e-006 A-2
         background      = 0.0 cm-1
         cyl_theta       = 1.57 rad
         cyl_phi         = 0.0 rad
         cyl_phi         = 0.0 rad
         sigma_theta     = 0.0 rad
         sigma_phi       = 0.0 rad
         sigma_radius    = 0.0 rad
         sigma_radius    = 0.0 rad
         n_pts           = 25.0 

    """
        
    def __init__(self):
        """ Initialization """
        
        # Initialize BaseComponent first, then sphere
        BaseComponent.__init__(self)
        CDispCylinderModel.__init__(self)
        
        ## Name of the model
        self.name = "DispCylinderModel"
   
    def clone(self):
        """ Return a identical copy of self """
        obj = DispCylinderModel()
        obj.params = copy.deepcopy(self.params)
        return obj   
   
    def run(self, x = 0.0):
        """ Evaluate the model
            @param x: input q, or [q,phi]
            @return: scattering function P(q)
        """
        
        return CDispCylinderModel.run(self, x)
   
# End of file
