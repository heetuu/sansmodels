#!/usr/bin/env python
"""
	This software was developed by the University of Tennessee as part of the
	Distributed Data Analysis of Neutron Scattering Experiments (DANSE)
	project funded by the US National Science Foundation.

	If you use DANSE applications to do scientific research that leads to
	publication, we ask that you acknowledge the use of the software with the
	following sentence:

	"This work benefited from DANSE software developed under NSF award DMR-0520547."

	copyright 2008, University of Tennessee
"""

""" Provide functionality for a C extension model

	WARNING: THIS FILE WAS GENERATED BY WRAPPERGENERATOR.PY
 	         DO NOT MODIFY THIS FILE, MODIFY [INCLUDE_FILE]
 	         AND RE-RUN THE GENERATOR SCRIPT

"""

from sans.models.BaseComponent import BaseComponent
from sans_extension.c_models import [CPYTHONCLASS]
import copy    
    
class [PYTHONCLASS]([CPYTHONCLASS], BaseComponent):
    """ Class that evaluates a [PYTHONCLASS] model. 
        This file was auto-generated from [INCLUDE_FILE].
        Refer to that file and the structure it contains
        for details of the model.
        [DEFAULT_LIST]
    """
        
    def __init__(self):
        """ Initialization """
        
        # Initialize BaseComponent first, then sphere
        BaseComponent.__init__(self)
        [CPYTHONCLASS].__init__(self)
        
        ## Name of the model
        self.name = "[PYTHONCLASS]"
        ## Model description
        self.description ="""[DESCRIPTION]"""
       
        [PAR_DETAILS]
        ## fittable parameters
        self.fixed=[FIXED]
        
        ## parameters with orientation
        self.orientation_params =[ORIENTATION_PARAMS]
   
    def clone(self):
        """ Return a identical copy of self """
        return self._clone([PYTHONCLASS]())   
        
    def __getstate__(self):
        """ return object state for pickling and copying """
        model_state = {'params': self.params, 'dispersion': self.dispersion, 'log': self.log}
        
        return self.__dict__, model_state
        
    def __setstate__(self, state):
        """ create object from pickled state """
        
        self.__dict__, model_state = state
        self.params = model_state['params']
        self.dispersion = model_state['dispersion']
        self.log = model_state['log']
       	
   
    def run(self, x = 0.0):
        """ Evaluate the model
            @param x: input q, or [q,phi]
            @return: scattering function P(q)
        """
        
        return [CPYTHONCLASS].run(self, x)
   
    def runXY(self, x = 0.0):
        """ Evaluate the model in cartesian coordinates
            @param x: input q, or [qx, qy]
            @return: scattering function P(q)
        """
        
        return [CPYTHONCLASS].runXY(self, x)
        
    def evalDistribution(self, x = []):
        """ Evaluate the model in cartesian coordinates
            @param x: input q[], or [qx[], qy[]]
            @return: scattering function P(q[])
        """
        return [CPYTHONCLASS].evalDistribution(self, x)
        
    def calculate_ER(self):
        """ Calculate the effective radius for P(q)*S(q)
            @return: the value of the effective radius
        """       
        return [CPYTHONCLASS].calculate_ER(self)
        
    def set_dispersion(self, parameter, dispersion):
        """
            Set the dispersion object for a model parameter
            @param parameter: name of the parameter [string]
            @dispersion: dispersion object of type DispersionModel
        """
        return [CPYTHONCLASS].set_dispersion(self, parameter, dispersion.cdisp)
        
   
# End of file